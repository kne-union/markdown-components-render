{"version":3,"file":"static/js/830.dfff2751.chunk.js","mappings":"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","sources":["../../src/markdown-it-components.js","../../src/compileVariables.js","../../src/preset.js","../../src/index.js"],"sourcesContent":["import yaml from 'js-yaml';\nimport Ajv from 'ajv';\n\nconst ajv = new Ajv();\n\nconst mdComponentsSchema = {\n  type: 'object',\n  properties: {\n    'md-components': {\n      type: 'object',\n      properties: {\n        type: { type: 'string' },\n        props: { type: 'object' }\n      },\n      required: ['type', 'props']\n    }\n  },\n  required: ['md-components']\n};\n\nconst validate = ajv.compile(mdComponentsSchema);\n\nconst mdComponents = function (md) {\n  const defaultFence = md.renderer.rules.fence;\n  const defaultCodeInline = md.renderer.rules.code_inline;\n\n  md.renderer.rules.code_inline = function (tokens, idx, options, env, self) {\n    const token = tokens[idx];\n    const regex = /^md-components:(.+)\\{(.+)}$/;\n    try {\n      if (regex.test(token.content)) {\n        const matcher = token.content.match(regex);\n        const componentsType = matcher[1],\n          props = JSON.parse(`{${matcher[2]}}`);\n        const jsonData = {\n          'md-components': {\n            type: componentsType,\n            props: props\n          }\n        };\n        if (validate(jsonData)) {\n          const element = document.createElement('code');\n          element.setAttribute('class', 'md-components');\n          element.dataset.components = JSON.stringify(jsonData);\n          return element.outerHTML;\n        }\n      }\n    } catch (e) {\n      console.warn(e);\n    }\n\n    return defaultCodeInline(tokens, idx, options, env, self);\n  };\n\n  md.renderer.rules.fence = function (tokens, idx, options, env, self) {\n    const token = tokens[idx];\n    if (token.info.trim() === 'yml') {\n      try {\n        const jsonData = yaml.load(token.content);\n        if (validate(jsonData)) {\n          const element = document.createElement('pre');\n          element.setAttribute('class', 'md-components');\n          element.dataset.components = JSON.stringify(jsonData);\n          return element.outerHTML;\n        }\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    return defaultFence(tokens, idx, options, env, self);\n  };\n};\n\nexport default mdComponents;\n","const compileVariables = (props, variables) => {\n  if (Array.isArray(props)) {\n    return props.map(prop => {\n      return compileVariables(prop, variables);\n    });\n  }\n  if (props && props.toString() === '[object Object]' && Object.keys(props).length > 0) {\n    const newProps = {};\n    Object.keys(props).forEach(key => {\n      newProps[key] = compileVariables(props[key], variables);\n    });\n    return newProps;\n  }\n  if (props && typeof props === 'string' && props.charAt(0) === '$' && variables[props.substring(1)]) {\n    return variables[props.substring(1)];\n  }\n\n  return props;\n};\n\nexport default compileVariables;\n","export const globalParams = {};\n\nexport default newOptions => {\n  return Object.assign(globalParams, newOptions);\n};\n","import React, { useMemo, Fragment, createElement } from 'react';\nimport markdown from 'markdown-it';\nimport mdComponents from './markdown-it-components';\nimport compileVariables from './compileVariables';\nimport useRefCallback from '@kne/use-ref-callback';\nimport merge from 'lodash/merge';\nimport preset, { globalParams } from './preset';\nimport htmlParser from 'html-react-parser';\n\nconst MarkdownComponentsRender = ({ children = '', render: customRender, ...props }) => {\n  const { htmlTransform, components = {}, variables = {}, options } = merge({}, globalParams, props);\n  const render = useRefCallback(children => {\n    const { config, plugins } = Object.assign({}, options, {\n      config: {},\n      plugins: []\n    });\n\n    const md = markdown(config);\n    plugins.forEach(plugin => {\n      const pluginArgs = Array.isArray(plugin) ? plugin : [plugin];\n      md.use(...pluginArgs);\n    });\n    md.use(mdComponents);\n\n    const html = md.render(children);\n\n    return htmlParser(typeof htmlTransform === 'function' ? htmlTransform(html) : html, {\n      replace(element) {\n        if (element.attribs && element.attribs.class === 'md-components' && element.attribs['data-components']) {\n          const componentsData = JSON.parse(element.attribs['data-components']);\n          if (!componentsData['md-components']) {\n            return null;\n          }\n          const { type, props } = componentsData['md-components'];\n          const MdComponent = components[type];\n          if (!MdComponent) {\n            return null;\n          }\n          return <MdComponent {...Object.assign({}, compileVariables(props, variables))} />;\n        }\n        return element;\n      }\n    });\n  });\n\n  const result = useMemo(() => {\n    return render(children);\n  }, [children, render]);\n\n  if (typeof customRender === 'function') {\n    return customRender(result);\n  }\n\n  return result;\n};\n\nexport default MarkdownComponentsRender;\nexport { preset };\n"],"names":["validate","Ajv","compile","type","properties","props","required","mdComponents","md","defaultFence","renderer","rules","fence","defaultCodeInline","code_inline","tokens","idx","options","env","self","token","regex","test","content","matcher","match","componentsType","jsonData","JSON","parse","concat","element","document","createElement","setAttribute","dataset","components","stringify","outerHTML","e","console","warn","info","trim","yaml","compileVariables","variables","Array","isArray","map","prop","toString","Object","keys","length","newProps","forEach","key","charAt","substring","globalParams","preset","newOptions","assign","MarkdownComponentsRender","_ref","children","render","customRender","_objectWithoutPropertiesLoose","_excluded","htmlTransform","merge","useRefCallback","config","plugins","markdown","plugin","pluginArgs","use","html","htmlParser","replace","attribs","class","componentsData","MdComponent","React","result","useMemo"],"sourceRoot":""}
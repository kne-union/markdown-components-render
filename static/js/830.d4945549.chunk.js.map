{"version":3,"file":"static/js/830.d4945549.chunk.js","mappings":"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","sources":["../../src/markdown-it-components.js","../../src/compileVariables.js","../../src/preset.js","../../src/index.js"],"sourcesContent":["import yaml from 'js-yaml';\nimport Ajv from 'ajv';\n\nconst ajv = new Ajv();\n\nconst mdComponentsSchema = {\n  type: 'object',\n  properties: {\n    'md-components': {\n      type: 'object',\n      properties: {\n        type: { type: 'string' },\n        props: { type: 'object' }\n      },\n      required: ['type', 'props']\n    }\n  },\n  required: ['md-components']\n};\n\nconst validate = ajv.compile(mdComponentsSchema);\n\nconst mdComponents = function (md) {\n  const defaultFence = md.renderer.rules.fence;\n  const defaultCodeInline = md.renderer.rules.code_inline;\n\n  md.renderer.rules.code_inline = function (tokens, idx, options, env, self) {\n    const token = tokens[idx];\n    try {\n      if (/^md-components/.test(token.content)) {\n        const pattern = /md-components:(\\w+)\\{([^}]+)}/g;\n        let matches;\n        const results = [];\n        while ((matches = pattern.exec(token.content)) !== null) {\n          results.push({\n            componentsType: matches[1],\n            props: matches[2]\n          });\n        }\n        if (results.length > 0) {\n          return results\n            .map(({ componentsType, props }) => {\n              const jsonData = {\n                'md-components': {\n                  type: componentsType,\n                  props: JSON.parse(`{${props}}`)\n                }\n              };\n              if (validate(jsonData)) {\n                const element = document.createElement('code');\n                element.setAttribute('class', 'md-components');\n                element.dataset.components = JSON.stringify(jsonData);\n                return element.outerHTML;\n              }\n              return '';\n            })\n            .join('');\n        }\n      }\n    } catch (e) {\n      console.warn(e);\n    }\n\n    return defaultCodeInline(tokens, idx, options, env, self);\n  };\n\n  md.renderer.rules.fence = function (tokens, idx, options, env, self) {\n    const token = tokens[idx];\n    if (token.info.trim() === 'yml') {\n      try {\n        const jsonData = yaml.load(token.content);\n        if (validate(jsonData)) {\n          const element = document.createElement('pre');\n          element.setAttribute('class', 'md-components');\n          element.dataset.components = JSON.stringify(jsonData);\n          return element.outerHTML;\n        }\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    return defaultFence(tokens, idx, options, env, self);\n  };\n};\n\nexport default mdComponents;\n","const compileVariables = (props, variables) => {\n  if (Array.isArray(props)) {\n    return props.map(prop => {\n      return compileVariables(prop, variables);\n    });\n  }\n  if (props && props.toString() === '[object Object]' && Object.keys(props).length > 0) {\n    const newProps = {};\n    Object.keys(props).forEach(key => {\n      newProps[key] = compileVariables(props[key], variables);\n    });\n    return newProps;\n  }\n  if (props && typeof props === 'string' && props.charAt(0) === '$' && variables[props.substring(1)]) {\n    return variables[props.substring(1)];\n  }\n\n  return props;\n};\n\nexport default compileVariables;\n","export const globalParams = {};\n\nexport default newOptions => {\n  return Object.assign(globalParams, newOptions);\n};\n","import React, { useMemo, Fragment, createElement } from 'react';\nimport markdown from 'markdown-it';\nimport mdComponents from './markdown-it-components';\nimport compileVariables from './compileVariables';\nimport useRefCallback from '@kne/use-ref-callback';\nimport merge from 'lodash/merge';\nimport preset, { globalParams } from './preset';\nimport htmlParser from 'html-react-parser';\n\nconst MarkdownComponentsRender = ({ children = '', render: customRender, ...props }) => {\n  const { htmlTransform, components = {}, variables = {}, options } = merge({}, globalParams, props);\n  const render = useRefCallback(children => {\n    const { config, plugins } = Object.assign({}, options, {\n      config: {},\n      plugins: []\n    });\n\n    const md = markdown(config);\n    plugins.forEach(plugin => {\n      const pluginArgs = Array.isArray(plugin) ? plugin : [plugin];\n      md.use(...pluginArgs);\n    });\n    md.use(mdComponents);\n\n    const html = md.render(children);\n\n    return htmlParser(typeof htmlTransform === 'function' ? htmlTransform(html) : html, {\n      replace(element) {\n        if (element.attribs && element.attribs.class === 'md-components' && element.attribs['data-components']) {\n          const componentsData = JSON.parse(element.attribs['data-components']);\n          if (!componentsData['md-components']) {\n            return null;\n          }\n          const { type, props } = componentsData['md-components'];\n          const MdComponent = components[type];\n          if (!MdComponent) {\n            return null;\n          }\n          return <MdComponent {...Object.assign({}, compileVariables(props, variables))} />;\n        }\n        return element;\n      }\n    });\n  });\n\n  const result = useMemo(() => {\n    return render(children);\n  }, [children, render]);\n\n  if (typeof customRender === 'function') {\n    return customRender(result);\n  }\n\n  return result;\n};\n\nexport default MarkdownComponentsRender;\nexport { preset };\n"],"names":["validate","Ajv","compile","type","properties","props","required","mdComponents","md","defaultFence","renderer","rules","fence","defaultCodeInline","code_inline","tokens","idx","options","env","self","token","test","content","pattern","matches","results","exec","push","componentsType","length","map","_ref2","jsonData","JSON","parse","concat","element","document","createElement","setAttribute","dataset","components","stringify","outerHTML","join","e","console","warn","info","trim","yaml","compileVariables","variables","Array","isArray","prop","toString","Object","keys","newProps","forEach","key","charAt","substring","globalParams","preset","newOptions","assign","MarkdownComponentsRender","_ref","children","render","customRender","_objectWithoutPropertiesLoose","_excluded","htmlTransform","merge","useRefCallback","config","plugins","markdown","plugin","pluginArgs","use","html","htmlParser","replace","attribs","class","componentsData","MdComponent","React","result","useMemo"],"sourceRoot":""}